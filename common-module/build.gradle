import ejiayou.composing.builds.AndroidX
import ejiayou.composing.builds.Google
import ejiayou.composing.builds.Testing
import ejiayou.composing.builds.ThirdLib

plugins {
    id 'com.android.library'
    id 'ejiayou.composing.builds'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'maven-publish'
    id 'kotlin-kapt'

}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = 'ejiayou.common.module'
                artifactId = 'common'
                version = '1.0.0'
            }
        }
    }
}
android {
    compileSdk 30

    defaultConfig {
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {
    testImplementation Testing.jUnit
    androidTestImplementation Testing.androidJunit
    androidTestImplementation Testing.espresso
    api 'com.github.nearbyren:ensd-uikit:1.2.1'
    api AndroidX.multidex
    api AndroidX.coreKtx
    api AndroidX.appcompat
    api AndroidX.lifecycleRuntimeKtx
    api ThirdLib.KotlinStdlib.kotlinStdlib
    api AndroidX.Navigation.kotCorAnd
    api AndroidX.Lifecycle.liveDataKtx
    api AndroidX.Lifecycle.viewModelKtx
    api AndroidX.Lifecycle.lcyExt
    api AndroidX.recyclerView
    api AndroidX.cardview
    api AndroidX.exifinterface
    api ThirdLib.MmkvStatic.mmkvStatic
    api ThirdLib.Relinker.relinker
    api ThirdLib.Arouter.arouterApi
    api ThirdLib.Logger.logger
    api ThirdLib.Timber.timber
    api ThirdLib.Rxjava.rxandroid
    api ThirdLib.Rxjava.rxbinding2
    api Google.gson
    api ThirdLib.Okhttp3.retrofit
    api ThirdLib.Okhttp3.converterCalars
    api ThirdLib.Okhttp3.retrofitConverterGson
    api ThirdLib.Okhttp3.adapterRxjava
    api ThirdLib.Okhttp3.adapterRxjava2
    api ThirdLib.Okhttp3.okhttp3
    api ThirdLib.Smarttablayout.smarttablayout
    api ThirdLib.Smarttablayout.smarttablayoutUtils
    api ThirdLib.Glide.glide
    api ThirdLib.Glide.glideCompiler
    api ThirdLib.Lottie.lottie
    api ThirdLib.Easypermissions.easypermissions
    api ThirdLib.ChannelHelper.helper
    api ThirdLib.Eventbus.eventbus
    api ThirdLib.Autosize.autosize
    api ThirdLib.Fastjson.fastjson
    api ThirdLib.Immersionbar.immersionbar
    api ThirdLib.AlignTextView.alignTextView
    api ThirdLib.LabelsView.labelsView
    api ThirdLib.Refresh.refreshLayoutKernel
    api ThirdLib.MagicIndicator.magicIndicator
    api ThirdLib.Permissionx.permissionx
    api ThirdLib.Sketch.sketch
    api ThirdLib.Sketch.sketchGif
    api ThirdLib.Arouter.arouterApi
    kapt ThirdLib.Arouter.arouterCompiler

}

configurations.all { //循环一个个的依赖库
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested //获取当前循环到的依赖库
        println("冲突包解决 requested = " + requested.group)
        println("冲突包解决 name = " + requested.name)
        if (requested.group == 'androidx.annotation') {//如果这个依赖库群组的名字是com.android.support
            println("冲突包解决匹配 进来了 = ")
            if (requested.name.startsWith("annotation")) {
                println("冲突包解决匹配 又进来了 = ")
                details.useVersion '1.1.0'//这里指定需要统一的依赖版本
            }
        }
    }
}